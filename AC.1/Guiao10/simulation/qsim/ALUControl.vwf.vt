// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2017 17:24:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALUControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALUControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ALUop;
reg [5:0] funct;
// wires                                               
wire [2:0] ALUcontrol;

// assign statements (if any)                          
ALUControl i1 (
// port map - connection between master ports and signals/registers   
	.ALUcontrol(ALUcontrol),
	.ALUop(ALUop),
	.funct(funct)
);
initial 
begin 
#1000000 $finish;
end 
// ALUop[ 1 ]
initial
begin
	ALUop[1] = 1'b0;
	ALUop[1] = #500000 1'b1;
end 
// ALUop[ 0 ]
initial
begin
	ALUop[0] = 1'b0;
	ALUop[0] = #280000 1'b1;
	ALUop[0] = #220000 1'b0;
	ALUop[0] = #250000 1'b1;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b1;
	funct[5] = #370000 1'b0;
	funct[5] = #140000 1'b1;
	funct[5] = #240000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #80000 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
	funct[3] = #240000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #490000 1'b1;
	funct[3] = #80000 1'b0;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
	funct[2] = #60000 1'b1;
	funct[2] = #180000 1'b0;
	funct[2] = #270000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #80000 1'b1;
	funct[2] = #120000 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
	funct[1] = #30000 1'b1;
	funct[1] = #30000 1'b0;
	funct[1] = #70000 1'b1;
	funct[1] = #150000 1'b0;
	funct[1] = #50000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #140000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #90000 1'b1;
	funct[1] = #30000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #80000 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
	funct[0] = #90000 1'b1;
	funct[0] = #40000 1'b0;
	funct[0] = #50000 1'b1;
	funct[0] = #60000 1'b0;
	funct[0] = #430000 1'b1;
	funct[0] = #80000 1'b0;
end 
endmodule

