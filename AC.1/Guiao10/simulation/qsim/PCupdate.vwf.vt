// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2017 12:05:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC_update
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_update_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg [25:0] jAddr26;
reg jump;
reg [31:0] offset32;
reg reset;
reg zero;
// wires                                               
wire [31:0] pc;

// assign statements (if any)                          
PC_update i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.jAddr26(jAddr26),
	.jump(jump),
	.offset32(offset32),
	.pc(pc),
	.reset(reset),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #30000 1'b1;
		# 30000;
	end
	clk = 1'b0;
	clk = #30000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #170000 1'b1;
	zero = #60000 1'b0;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #130000 1'b1;
	branch = #180000 1'b0;
end 

// jump
initial
begin
	jump = 1'b0;
	jump = #50000 1'b1;
	jump = #60000 1'b0;
end 
// jAddr26[ 25 ]
initial
begin
	jAddr26[25] = 1'b0;
	jAddr26[25] = #420000 1'b1;
	jAddr26[25] = #70000 1'b0;
	jAddr26[25] = #280000 1'b1;
	jAddr26[25] = #70000 1'b0;
end 
// jAddr26[ 24 ]
initial
begin
	jAddr26[24] = 1'b0;
	jAddr26[24] = #280000 1'b1;
	jAddr26[24] = #140000 1'b0;
	jAddr26[24] = #70000 1'b1;
	jAddr26[24] = #210000 1'b0;
	jAddr26[24] = #140000 1'b1;
end 
// jAddr26[ 23 ]
initial
begin
	jAddr26[23] = 1'b1;
	jAddr26[23] = #70000 1'b0;
	jAddr26[23] = #70000 1'b1;
	jAddr26[23] = #280000 1'b0;
	jAddr26[23] = #140000 1'b1;
	jAddr26[23] = #70000 1'b0;
	jAddr26[23] = #70000 1'b1;
	jAddr26[23] = #70000 1'b0;
	jAddr26[23] = #70000 1'b1;
	jAddr26[23] = #70000 1'b0;
end 
// jAddr26[ 22 ]
initial
begin
	jAddr26[22] = 1'b1;
	jAddr26[22] = #70000 1'b0;
	jAddr26[22] = #280000 1'b1;
	jAddr26[22] = #140000 1'b0;
	jAddr26[22] = #350000 1'b1;
end 
// jAddr26[ 21 ]
initial
begin
	jAddr26[21] = 1'b0;
	jAddr26[21] = #280000 1'b1;
	jAddr26[21] = #70000 1'b0;
	jAddr26[21] = #280000 1'b1;
	jAddr26[21] = #140000 1'b0;
	jAddr26[21] = #70000 1'b1;
	jAddr26[21] = #70000 1'b0;
end 
// jAddr26[ 20 ]
initial
begin
	jAddr26[20] = 1'b1;
	jAddr26[20] = #70000 1'b0;
	jAddr26[20] = #70000 1'b1;
	jAddr26[20] = #420000 1'b0;
	jAddr26[20] = #70000 1'b1;
	jAddr26[20] = #70000 1'b0;
	jAddr26[20] = #210000 1'b1;
end 
// jAddr26[ 19 ]
initial
begin
	jAddr26[19] = 1'b0;
	jAddr26[19] = #140000 1'b1;
	jAddr26[19] = #70000 1'b0;
	jAddr26[19] = #280000 1'b1;
	jAddr26[19] = #280000 1'b0;
end 
// jAddr26[ 18 ]
initial
begin
	jAddr26[18] = 1'b1;
	jAddr26[18] = #70000 1'b0;
	jAddr26[18] = #210000 1'b1;
	jAddr26[18] = #70000 1'b0;
	jAddr26[18] = #70000 1'b1;
	jAddr26[18] = #70000 1'b0;
	jAddr26[18] = #70000 1'b1;
	jAddr26[18] = #140000 1'b0;
	jAddr26[18] = #70000 1'b1;
	jAddr26[18] = #70000 1'b0;
	jAddr26[18] = #140000 1'b1;
end 
// jAddr26[ 17 ]
initial
begin
	jAddr26[17] = 1'b0;
	jAddr26[17] = #420000 1'b1;
	jAddr26[17] = #280000 1'b0;
	jAddr26[17] = #280000 1'b1;
end 
// jAddr26[ 16 ]
initial
begin
	jAddr26[16] = 1'b0;
	jAddr26[16] = #140000 1'b1;
	jAddr26[16] = #210000 1'b0;
	jAddr26[16] = #280000 1'b1;
	jAddr26[16] = #140000 1'b0;
	jAddr26[16] = #70000 1'b1;
end 
// jAddr26[ 15 ]
initial
begin
	jAddr26[15] = 1'b1;
	jAddr26[15] = #70000 1'b0;
	jAddr26[15] = #350000 1'b1;
	jAddr26[15] = #140000 1'b0;
	jAddr26[15] = #70000 1'b1;
	jAddr26[15] = #70000 1'b0;
	jAddr26[15] = #70000 1'b1;
	jAddr26[15] = #210000 1'b0;
end 
// jAddr26[ 14 ]
initial
begin
	jAddr26[14] = 1'b0;
	jAddr26[14] = #140000 1'b1;
	jAddr26[14] = #70000 1'b0;
	jAddr26[14] = #70000 1'b1;
	jAddr26[14] = #140000 1'b0;
	jAddr26[14] = #70000 1'b1;
	jAddr26[14] = #70000 1'b0;
	jAddr26[14] = #70000 1'b1;
	jAddr26[14] = #70000 1'b0;
	jAddr26[14] = #140000 1'b1;
	jAddr26[14] = #70000 1'b0;
	jAddr26[14] = #70000 1'b1;
end 
// jAddr26[ 13 ]
initial
begin
	jAddr26[13] = 1'b1;
	jAddr26[13] = #70000 1'b0;
	jAddr26[13] = #140000 1'b1;
	jAddr26[13] = #140000 1'b0;
	jAddr26[13] = #210000 1'b1;
	jAddr26[13] = #70000 1'b0;
	jAddr26[13] = #350000 1'b1;
end 
// jAddr26[ 12 ]
initial
begin
	jAddr26[12] = 1'b0;
	jAddr26[12] = #280000 1'b1;
	jAddr26[12] = #140000 1'b0;
	jAddr26[12] = #70000 1'b1;
	jAddr26[12] = #70000 1'b0;
	jAddr26[12] = #210000 1'b1;
	jAddr26[12] = #140000 1'b0;
end 
// jAddr26[ 11 ]
initial
begin
	jAddr26[11] = 1'b1;
	jAddr26[11] = #70000 1'b0;
	jAddr26[11] = #70000 1'b1;
	jAddr26[11] = #70000 1'b0;
	jAddr26[11] = #70000 1'b1;
	jAddr26[11] = #210000 1'b0;
	jAddr26[11] = #140000 1'b1;
	jAddr26[11] = #140000 1'b0;
	jAddr26[11] = #70000 1'b1;
	jAddr26[11] = #140000 1'b0;
end 
// jAddr26[ 10 ]
initial
begin
	jAddr26[10] = 1'b1;
	jAddr26[10] = #70000 1'b0;
	jAddr26[10] = #140000 1'b1;
	jAddr26[10] = #210000 1'b0;
	jAddr26[10] = #140000 1'b1;
	jAddr26[10] = #70000 1'b0;
	jAddr26[10] = #70000 1'b1;
	jAddr26[10] = #70000 1'b0;
	jAddr26[10] = #140000 1'b1;
	jAddr26[10] = #70000 1'b0;
end 
// jAddr26[ 9 ]
initial
begin
	jAddr26[9] = 1'b0;
	jAddr26[9] = #140000 1'b1;
	jAddr26[9] = #70000 1'b0;
	jAddr26[9] = #70000 1'b1;
	jAddr26[9] = #70000 1'b0;
	jAddr26[9] = #210000 1'b1;
	jAddr26[9] = #70000 1'b0;
	jAddr26[9] = #70000 1'b1;
	jAddr26[9] = #210000 1'b0;
end 
// jAddr26[ 8 ]
initial
begin
	jAddr26[8] = 1'b1;
	jAddr26[8] = #70000 1'b0;
	jAddr26[8] = #70000 1'b1;
	jAddr26[8] = #70000 1'b0;
	jAddr26[8] = #70000 1'b1;
	jAddr26[8] = #210000 1'b0;
	jAddr26[8] = #140000 1'b1;
	jAddr26[8] = #210000 1'b0;
	jAddr26[8] = #70000 1'b1;
	jAddr26[8] = #70000 1'b0;
end 
// jAddr26[ 7 ]
initial
begin
	jAddr26[7] = 1'b1;
	jAddr26[7] = #70000 1'b0;
	jAddr26[7] = #210000 1'b1;
	jAddr26[7] = #70000 1'b0;
	jAddr26[7] = #70000 1'b1;
	jAddr26[7] = #210000 1'b0;
	jAddr26[7] = #70000 1'b1;
	jAddr26[7] = #70000 1'b0;
	jAddr26[7] = #140000 1'b1;
end 
// jAddr26[ 6 ]
initial
begin
	jAddr26[6] = 1'b0;
	jAddr26[6] = #210000 1'b1;
	jAddr26[6] = #70000 1'b0;
	jAddr26[6] = #70000 1'b1;
	jAddr26[6] = #140000 1'b0;
	jAddr26[6] = #70000 1'b1;
	jAddr26[6] = #70000 1'b0;
	jAddr26[6] = #70000 1'b1;
	jAddr26[6] = #210000 1'b0;
	jAddr26[6] = #70000 1'b1;
end 
// jAddr26[ 5 ]
initial
begin
	jAddr26[5] = 1'b1;
	jAddr26[5] = #70000 1'b0;
	jAddr26[5] = #70000 1'b1;
	jAddr26[5] = #140000 1'b0;
	jAddr26[5] = #70000 1'b1;
	jAddr26[5] = #140000 1'b0;
	jAddr26[5] = #420000 1'b1;
end 
// jAddr26[ 4 ]
initial
begin
	jAddr26[4] = 1'b1;
	jAddr26[4] = #70000 1'b0;
	jAddr26[4] = #70000 1'b1;
	jAddr26[4] = #210000 1'b0;
	jAddr26[4] = #70000 1'b1;
	jAddr26[4] = #70000 1'b0;
	jAddr26[4] = #210000 1'b1;
	jAddr26[4] = #210000 1'b0;
end 
// jAddr26[ 3 ]
initial
begin
	jAddr26[3] = 1'b1;
	jAddr26[3] = #70000 1'b0;
	jAddr26[3] = #70000 1'b1;
	jAddr26[3] = #70000 1'b0;
	jAddr26[3] = #70000 1'b1;
	jAddr26[3] = #70000 1'b0;
	jAddr26[3] = #210000 1'b1;
	jAddr26[3] = #70000 1'b0;
	jAddr26[3] = #140000 1'b1;
	jAddr26[3] = #210000 1'b0;
end 
// jAddr26[ 2 ]
initial
begin
	jAddr26[2] = 1'b0;
	jAddr26[2] = #70000 1'b1;
	jAddr26[2] = #140000 1'b0;
	jAddr26[2] = #70000 1'b1;
	jAddr26[2] = #140000 1'b0;
	jAddr26[2] = #140000 1'b1;
	jAddr26[2] = #70000 1'b0;
end 
// jAddr26[ 1 ]
initial
begin
	jAddr26[1] = 1'b0;
	jAddr26[1] = #140000 1'b1;
	jAddr26[1] = #70000 1'b0;
	jAddr26[1] = #70000 1'b1;
	jAddr26[1] = #140000 1'b0;
	jAddr26[1] = #70000 1'b1;
	jAddr26[1] = #140000 1'b0;
	jAddr26[1] = #210000 1'b1;
end 
// jAddr26[ 0 ]
initial
begin
	jAddr26[0] = 1'b1;
	jAddr26[0] = #140000 1'b0;
	jAddr26[0] = #70000 1'b1;
	jAddr26[0] = #210000 1'b0;
	jAddr26[0] = #70000 1'b1;
end 
// offset32[ 31 ]
initial
begin
	offset32[31] = 1'b1;
	offset32[31] = #140000 1'b0;
	offset32[31] = #140000 1'b1;
	offset32[31] = #70000 1'b0;
	offset32[31] = #70000 1'b1;
	offset32[31] = #70000 1'b0;
end 
// offset32[ 30 ]
initial
begin
	offset32[30] = 1'b1;
	offset32[30] = #140000 1'b0;
	offset32[30] = #210000 1'b1;
	offset32[30] = #70000 1'b0;
	offset32[30] = #70000 1'b1;
	offset32[30] = #70000 1'b0;
	offset32[30] = #210000 1'b1;
	offset32[30] = #140000 1'b0;
	offset32[30] = #70000 1'b1;
end 
// offset32[ 29 ]
initial
begin
	offset32[29] = 1'b1;
	offset32[29] = #70000 1'b0;
	offset32[29] = #280000 1'b1;
	offset32[29] = #140000 1'b0;
	offset32[29] = #70000 1'b1;
	offset32[29] = #70000 1'b0;
	offset32[29] = #210000 1'b1;
	offset32[29] = #70000 1'b0;
	offset32[29] = #70000 1'b1;
end 
// offset32[ 28 ]
initial
begin
	offset32[28] = 1'b1;
	offset32[28] = #140000 1'b0;
	offset32[28] = #140000 1'b1;
	offset32[28] = #70000 1'b0;
	offset32[28] = #70000 1'b1;
	offset32[28] = #70000 1'b0;
	offset32[28] = #70000 1'b1;
	offset32[28] = #210000 1'b0;
	offset32[28] = #70000 1'b1;
	offset32[28] = #70000 1'b0;
end 
// offset32[ 27 ]
initial
begin
	offset32[27] = 1'b0;
	offset32[27] = #70000 1'b1;
	offset32[27] = #70000 1'b0;
	offset32[27] = #140000 1'b1;
	offset32[27] = #70000 1'b0;
	offset32[27] = #140000 1'b1;
	offset32[27] = #70000 1'b0;
	offset32[27] = #140000 1'b1;
	offset32[27] = #140000 1'b0;
	offset32[27] = #140000 1'b1;
end 
// offset32[ 26 ]
initial
begin
	offset32[26] = 1'b1;
	offset32[26] = #70000 1'b0;
	offset32[26] = #210000 1'b1;
	offset32[26] = #70000 1'b0;
	offset32[26] = #350000 1'b1;
end 
// offset32[ 25 ]
initial
begin
	offset32[25] = 1'b1;
	offset32[25] = #140000 1'b0;
	offset32[25] = #140000 1'b1;
	offset32[25] = #210000 1'b0;
	offset32[25] = #70000 1'b1;
	offset32[25] = #70000 1'b0;
	offset32[25] = #70000 1'b1;
end 
// offset32[ 24 ]
initial
begin
	offset32[24] = 1'b1;
	offset32[24] = #70000 1'b0;
	offset32[24] = #630000 1'b1;
	offset32[24] = #140000 1'b0;
	offset32[24] = #70000 1'b1;
end 
// offset32[ 23 ]
initial
begin
	offset32[23] = 1'b0;
	offset32[23] = #70000 1'b1;
	offset32[23] = #70000 1'b0;
	offset32[23] = #210000 1'b1;
	offset32[23] = #210000 1'b0;
	offset32[23] = #280000 1'b1;
	offset32[23] = #70000 1'b0;
end 
// offset32[ 22 ]
initial
begin
	offset32[22] = 1'b0;
	offset32[22] = #490000 1'b1;
	offset32[22] = #210000 1'b0;
	offset32[22] = #140000 1'b1;
	offset32[22] = #70000 1'b0;
	offset32[22] = #70000 1'b1;
end 
// offset32[ 21 ]
initial
begin
	offset32[21] = 1'b0;
	offset32[21] = #70000 1'b1;
	offset32[21] = #70000 1'b0;
	offset32[21] = #210000 1'b1;
	offset32[21] = #70000 1'b0;
	offset32[21] = #210000 1'b1;
end 
// offset32[ 20 ]
initial
begin
	offset32[20] = 1'b1;
	offset32[20] = #70000 1'b0;
	offset32[20] = #210000 1'b1;
	offset32[20] = #70000 1'b0;
	offset32[20] = #70000 1'b1;
	offset32[20] = #70000 1'b0;
	offset32[20] = #210000 1'b1;
	offset32[20] = #140000 1'b0;
	offset32[20] = #140000 1'b1;
end 
// offset32[ 19 ]
initial
begin
	offset32[19] = 1'b1;
	offset32[19] = #140000 1'b0;
	offset32[19] = #140000 1'b1;
	offset32[19] = #70000 1'b0;
	offset32[19] = #70000 1'b1;
	offset32[19] = #350000 1'b0;
end 
// offset32[ 18 ]
initial
begin
	offset32[18] = 1'b0;
	offset32[18] = #280000 1'b1;
	offset32[18] = #70000 1'b0;
	offset32[18] = #210000 1'b1;
	offset32[18] = #70000 1'b0;
	offset32[18] = #70000 1'b1;
	offset32[18] = #210000 1'b0;
	offset32[18] = #70000 1'b1;
end 
// offset32[ 17 ]
initial
begin
	offset32[17] = 1'b1;
	offset32[17] = #140000 1'b0;
	offset32[17] = #140000 1'b1;
	offset32[17] = #140000 1'b0;
	offset32[17] = #140000 1'b1;
	offset32[17] = #70000 1'b0;
	offset32[17] = #70000 1'b1;
	offset32[17] = #140000 1'b0;
end 
// offset32[ 16 ]
initial
begin
	offset32[16] = 1'b0;
	offset32[16] = #280000 1'b1;
	offset32[16] = #70000 1'b0;
	offset32[16] = #140000 1'b1;
	offset32[16] = #210000 1'b0;
	offset32[16] = #210000 1'b1;
	offset32[16] = #70000 1'b0;
end 
// offset32[ 15 ]
initial
begin
	offset32[15] = 1'b1;
	offset32[15] = #70000 1'b0;
	offset32[15] = #280000 1'b1;
	offset32[15] = #140000 1'b0;
	offset32[15] = #70000 1'b1;
	offset32[15] = #140000 1'b0;
	offset32[15] = #140000 1'b1;
end 
// offset32[ 14 ]
initial
begin
	offset32[14] = 1'b1;
	offset32[14] = #70000 1'b0;
	offset32[14] = #350000 1'b1;
	offset32[14] = #70000 1'b0;
	offset32[14] = #280000 1'b1;
	offset32[14] = #70000 1'b0;
	offset32[14] = #140000 1'b1;
end 
// offset32[ 13 ]
initial
begin
	offset32[13] = 1'b0;
	offset32[13] = #70000 1'b1;
	offset32[13] = #70000 1'b0;
	offset32[13] = #140000 1'b1;
	offset32[13] = #140000 1'b0;
	offset32[13] = #70000 1'b1;
	offset32[13] = #70000 1'b0;
	offset32[13] = #70000 1'b1;
	offset32[13] = #70000 1'b0;
end 
// offset32[ 12 ]
initial
begin
	offset32[12] = 1'b1;
	offset32[12] = #70000 1'b0;
	offset32[12] = #210000 1'b1;
	offset32[12] = #70000 1'b0;
	offset32[12] = #70000 1'b1;
	offset32[12] = #140000 1'b0;
	offset32[12] = #140000 1'b1;
	offset32[12] = #210000 1'b0;
	offset32[12] = #70000 1'b1;
end 
// offset32[ 11 ]
initial
begin
	offset32[11] = 1'b1;
	offset32[11] = #70000 1'b0;
	offset32[11] = #280000 1'b1;
	offset32[11] = #210000 1'b0;
	offset32[11] = #210000 1'b1;
	offset32[11] = #70000 1'b0;
	offset32[11] = #70000 1'b1;
end 
// offset32[ 10 ]
initial
begin
	offset32[10] = 1'b0;
	offset32[10] = #70000 1'b1;
	offset32[10] = #70000 1'b0;
	offset32[10] = #280000 1'b1;
	offset32[10] = #70000 1'b0;
	offset32[10] = #70000 1'b1;
	offset32[10] = #70000 1'b0;
	offset32[10] = #70000 1'b1;
	offset32[10] = #70000 1'b0;
	offset32[10] = #140000 1'b1;
	offset32[10] = #70000 1'b0;
end 
// offset32[ 9 ]
initial
begin
	offset32[9] = 1'b0;
	offset32[9] = #70000 1'b1;
	offset32[9] = #70000 1'b0;
	offset32[9] = #630000 1'b1;
	offset32[9] = #140000 1'b0;
end 
// offset32[ 8 ]
initial
begin
	offset32[8] = 1'b0;
	offset32[8] = #70000 1'b1;
	offset32[8] = #70000 1'b0;
	offset32[8] = #140000 1'b1;
	offset32[8] = #280000 1'b0;
	offset32[8] = #70000 1'b1;
	offset32[8] = #70000 1'b0;
	offset32[8] = #70000 1'b1;
	offset32[8] = #70000 1'b0;
	offset32[8] = #70000 1'b1;
end 
// offset32[ 7 ]
initial
begin
	offset32[7] = 1'b0;
	offset32[7] = #70000 1'b1;
	offset32[7] = #70000 1'b0;
	offset32[7] = #140000 1'b1;
	offset32[7] = #70000 1'b0;
	offset32[7] = #210000 1'b1;
	offset32[7] = #140000 1'b0;
	offset32[7] = #70000 1'b1;
	offset32[7] = #210000 1'b0;
end 
// offset32[ 6 ]
initial
begin
	offset32[6] = 1'b1;
	offset32[6] = #70000 1'b0;
	offset32[6] = #280000 1'b1;
	offset32[6] = #70000 1'b0;
	offset32[6] = #70000 1'b1;
	offset32[6] = #210000 1'b0;
end 
// offset32[ 5 ]
initial
begin
	offset32[5] = 1'b1;
	offset32[5] = #70000 1'b0;
	offset32[5] = #210000 1'b1;
	offset32[5] = #70000 1'b0;
	offset32[5] = #70000 1'b1;
	offset32[5] = #210000 1'b0;
	offset32[5] = #140000 1'b1;
	offset32[5] = #140000 1'b0;
	offset32[5] = #70000 1'b1;
end 
// offset32[ 4 ]
initial
begin
	offset32[4] = 1'b0;
	offset32[4] = #70000 1'b1;
	offset32[4] = #210000 1'b0;
	offset32[4] = #280000 1'b1;
	offset32[4] = #140000 1'b0;
	offset32[4] = #70000 1'b1;
	offset32[4] = #70000 1'b0;
end 
// offset32[ 3 ]
initial
begin
	offset32[3] = 1'b1;
	offset32[3] = #70000 1'b0;
	offset32[3] = #350000 1'b1;
	offset32[3] = #280000 1'b0;
	offset32[3] = #280000 1'b1;
end 
// offset32[ 2 ]
initial
begin
	offset32[2] = 1'b1;
	offset32[2] = #490000 1'b0;
	offset32[2] = #70000 1'b1;
	offset32[2] = #70000 1'b0;
	offset32[2] = #70000 1'b1;
	offset32[2] = #70000 1'b0;
	offset32[2] = #210000 1'b1;
end 
// offset32[ 1 ]
initial
begin
	offset32[1] = 1'b0;
	offset32[1] = #70000 1'b1;
	offset32[1] = #70000 1'b0;
	offset32[1] = #140000 1'b1;
	offset32[1] = #70000 1'b0;
	offset32[1] = #210000 1'b1;
	offset32[1] = #70000 1'b0;
	offset32[1] = #210000 1'b1;
	offset32[1] = #70000 1'b0;
end 
// offset32[ 0 ]
initial
begin
	offset32[0] = 1'b1;
	offset32[0] = #70000 1'b0;
	offset32[0] = #210000 1'b1;
	offset32[0] = #350000 1'b0;
	offset32[0] = #70000 1'b1;
	offset32[0] = #70000 1'b0;
	offset32[0] = #70000 1'b1;
	offset32[0] = #70000 1'b0;
end 
endmodule

