// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2017 23:23:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux2N
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux2N_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] oper0;
reg [4:0] oper1;
reg sel;
// wires                                               
wire [4:0] muxOut;

// assign statements (if any)                          
Mux2N i1 (
// port map - connection between master ports and signals/registers   
	.muxOut(muxOut),
	.oper0(oper0),
	.oper1(oper1),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// oper0[ 4 ]
initial
begin
	oper0[4] = 1'b1;
	oper0[4] = #350000 1'b0;
	oper0[4] = #70000 1'b1;
	oper0[4] = #70000 1'b0;
	oper0[4] = #70000 1'b1;
	oper0[4] = #70000 1'b0;
	oper0[4] = #210000 1'b1;
	oper0[4] = #140000 1'b0;
end 
// oper0[ 3 ]
initial
begin
	oper0[3] = 1'b1;
	oper0[3] = #70000 1'b0;
	oper0[3] = #70000 1'b1;
	oper0[3] = #210000 1'b0;
	oper0[3] = #350000 1'b1;
	oper0[3] = #70000 1'b0;
	oper0[3] = #70000 1'b1;
	oper0[3] = #70000 1'b0;
	oper0[3] = #70000 1'b1;
end 
// oper0[ 2 ]
initial
begin
	oper0[2] = 1'b0;
	oper0[2] = #70000 1'b1;
	oper0[2] = #140000 1'b0;
	oper0[2] = #350000 1'b1;
	oper0[2] = #210000 1'b0;
	oper0[2] = #70000 1'b1;
	oper0[2] = #70000 1'b0;
	oper0[2] = #70000 1'b1;
end 
// oper0[ 1 ]
initial
begin
	oper0[1] = 1'b1;
	oper0[1] = #210000 1'b0;
	oper0[1] = #70000 1'b1;
	oper0[1] = #70000 1'b0;
	oper0[1] = #140000 1'b1;
	oper0[1] = #70000 1'b0;
	oper0[1] = #420000 1'b1;
end 
// oper0[ 0 ]
initial
begin
	oper0[0] = 1'b1;
	oper0[0] = #140000 1'b0;
	oper0[0] = #140000 1'b1;
	oper0[0] = #70000 1'b0;
	oper0[0] = #70000 1'b1;
	oper0[0] = #140000 1'b0;
end 
// oper1[ 4 ]
initial
begin
	oper1[4] = 1'b0;
	oper1[4] = #630000 1'b1;
	oper1[4] = #70000 1'b0;
	oper1[4] = #70000 1'b1;
	oper1[4] = #70000 1'b0;
	oper1[4] = #70000 1'b1;
end 
// oper1[ 3 ]
initial
begin
	oper1[3] = 1'b1;
	oper1[3] = #70000 1'b0;
	oper1[3] = #350000 1'b1;
	oper1[3] = #140000 1'b0;
	oper1[3] = #350000 1'b1;
end 
// oper1[ 2 ]
initial
begin
	oper1[2] = 1'b1;
	oper1[2] = #70000 1'b0;
	oper1[2] = #140000 1'b1;
	oper1[2] = #140000 1'b0;
	oper1[2] = #490000 1'b1;
end 
// oper1[ 1 ]
initial
begin
	oper1[1] = 1'b0;
	oper1[1] = #70000 1'b1;
	oper1[1] = #70000 1'b0;
	oper1[1] = #70000 1'b1;
	oper1[1] = #70000 1'b0;
	oper1[1] = #70000 1'b1;
	oper1[1] = #70000 1'b0;
	oper1[1] = #210000 1'b1;
	oper1[1] = #70000 1'b0;
	oper1[1] = #210000 1'b1;
end 
// oper1[ 0 ]
initial
begin
	oper1[0] = 1'b0;
	oper1[0] = #140000 1'b1;
	oper1[0] = #210000 1'b0;
	oper1[0] = #70000 1'b1;
	oper1[0] = #280000 1'b0;
	oper1[0] = #70000 1'b1;
end 

// sel
initial
begin
	sel = 1'b0;
	sel = #210000 1'b1;
	sel = #70000 1'b0;
	sel = #280000 1'b1;
	sel = #280000 1'b0;
	sel = #140000 1'b1;
end 
endmodule

