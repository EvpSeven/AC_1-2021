// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2018 10:08:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PCupdate
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PCupdate_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg [25:0] jAddr26;
reg jump;
reg [31:0] offset;
reg reset;
reg zero;
// wires                                               
wire [31:0] PC;

// assign statements (if any)                          
PCupdate i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.jAddr26(jAddr26),
	.jump(jump),
	.offset(offset),
	.PC(PC),
	.reset(reset),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(13)
	begin
		clk = 1'b0;
		clk = #37500 1'b1;
		# 37500;
	end
	clk = 1'b0;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #360000 1'b1;
	branch = #220000 1'b0;
end 

// jump
initial
begin
	jump = 1'b0;
	jump = #220000 1'b1;
	jump = #80000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #480000 1'b1;
	zero = #100000 1'b0;
end 
// offset[ 31 ]
initial
begin
	offset[31] = 1'b0;
end 
// offset[ 30 ]
initial
begin
	offset[30] = 1'b0;
end 
// offset[ 29 ]
initial
begin
	offset[29] = 1'b0;
end 
// offset[ 28 ]
initial
begin
	offset[28] = 1'b0;
end 
// offset[ 27 ]
initial
begin
	offset[27] = 1'b0;
end 
// offset[ 26 ]
initial
begin
	offset[26] = 1'b0;
end 
// offset[ 25 ]
initial
begin
	offset[25] = 1'b0;
end 
// offset[ 24 ]
initial
begin
	offset[24] = 1'b0;
end 
// offset[ 23 ]
initial
begin
	offset[23] = 1'b0;
end 
// offset[ 22 ]
initial
begin
	offset[22] = 1'b0;
end 
// offset[ 21 ]
initial
begin
	offset[21] = 1'b0;
end 
// offset[ 20 ]
initial
begin
	offset[20] = 1'b0;
end 
// offset[ 19 ]
initial
begin
	offset[19] = 1'b0;
end 
// offset[ 18 ]
initial
begin
	offset[18] = 1'b0;
end 
// offset[ 17 ]
initial
begin
	offset[17] = 1'b0;
end 
// offset[ 16 ]
initial
begin
	offset[16] = 1'b0;
end 
// offset[ 15 ]
initial
begin
	offset[15] = 1'b0;
end 
// offset[ 14 ]
initial
begin
	offset[14] = 1'b0;
end 
// offset[ 13 ]
initial
begin
	offset[13] = 1'b0;
end 
// offset[ 12 ]
initial
begin
	offset[12] = 1'b0;
end 
// offset[ 11 ]
initial
begin
	offset[11] = 1'b0;
end 
// offset[ 10 ]
initial
begin
	offset[10] = 1'b0;
end 
// offset[ 9 ]
initial
begin
	offset[9] = 1'b0;
end 
// offset[ 8 ]
initial
begin
	offset[8] = 1'b0;
end 
// offset[ 7 ]
initial
begin
	offset[7] = 1'b0;
end 
// offset[ 6 ]
initial
begin
	offset[6] = 1'b0;
end 
// offset[ 5 ]
initial
begin
	offset[5] = 1'b0;
end 
// offset[ 4 ]
initial
begin
	offset[4] = 1'b0;
end 
// offset[ 3 ]
initial
begin
	offset[3] = 1'b0;
end 
// offset[ 2 ]
initial
begin
	offset[2] = 1'b0;
end 
// offset[ 1 ]
initial
begin
	offset[1] = 1'b0;
end 
// offset[ 0 ]
initial
begin
	offset[0] = 1'b0;
end 
// jAddr26[ 25 ]
initial
begin
	jAddr26[25] = 1'b0;
end 
// jAddr26[ 24 ]
initial
begin
	jAddr26[24] = 1'b0;
end 
// jAddr26[ 23 ]
initial
begin
	jAddr26[23] = 1'b0;
end 
// jAddr26[ 22 ]
initial
begin
	jAddr26[22] = 1'b0;
end 
// jAddr26[ 21 ]
initial
begin
	jAddr26[21] = 1'b0;
end 
// jAddr26[ 20 ]
initial
begin
	jAddr26[20] = 1'b0;
end 
// jAddr26[ 19 ]
initial
begin
	jAddr26[19] = 1'b0;
end 
// jAddr26[ 18 ]
initial
begin
	jAddr26[18] = 1'b0;
end 
// jAddr26[ 17 ]
initial
begin
	jAddr26[17] = 1'b0;
end 
// jAddr26[ 16 ]
initial
begin
	jAddr26[16] = 1'b0;
end 
// jAddr26[ 15 ]
initial
begin
	jAddr26[15] = 1'b0;
	jAddr26[15] = #460000 1'b1;
	jAddr26[15] = #120000 1'b0;
end 
// jAddr26[ 14 ]
initial
begin
	jAddr26[14] = 1'b0;
	jAddr26[14] = #460000 1'b1;
	jAddr26[14] = #120000 1'b0;
end 
// jAddr26[ 13 ]
initial
begin
	jAddr26[13] = 1'b0;
	jAddr26[13] = #460000 1'b1;
	jAddr26[13] = #120000 1'b0;
end 
// jAddr26[ 12 ]
initial
begin
	jAddr26[12] = 1'b0;
	jAddr26[12] = #460000 1'b1;
	jAddr26[12] = #120000 1'b0;
end 
// jAddr26[ 11 ]
initial
begin
	jAddr26[11] = 1'b0;
	jAddr26[11] = #460000 1'b1;
	jAddr26[11] = #120000 1'b0;
end 
// jAddr26[ 10 ]
initial
begin
	jAddr26[10] = 1'b0;
	jAddr26[10] = #460000 1'b1;
	jAddr26[10] = #120000 1'b0;
end 
// jAddr26[ 9 ]
initial
begin
	jAddr26[9] = 1'b0;
	jAddr26[9] = #460000 1'b1;
	jAddr26[9] = #120000 1'b0;
end 
// jAddr26[ 8 ]
initial
begin
	jAddr26[8] = 1'b0;
	jAddr26[8] = #460000 1'b1;
	jAddr26[8] = #120000 1'b0;
end 
// jAddr26[ 7 ]
initial
begin
	jAddr26[7] = 1'b0;
	jAddr26[7] = #460000 1'b1;
	jAddr26[7] = #120000 1'b0;
end 
// jAddr26[ 6 ]
initial
begin
	jAddr26[6] = 1'b0;
	jAddr26[6] = #460000 1'b1;
	jAddr26[6] = #120000 1'b0;
end 
// jAddr26[ 5 ]
initial
begin
	jAddr26[5] = 1'b0;
	jAddr26[5] = #460000 1'b1;
	jAddr26[5] = #120000 1'b0;
end 
// jAddr26[ 4 ]
initial
begin
	jAddr26[4] = 1'b0;
	jAddr26[4] = #360000 1'b1;
	jAddr26[4] = #220000 1'b0;
end 
// jAddr26[ 3 ]
initial
begin
	jAddr26[3] = 1'b0;
	jAddr26[3] = #460000 1'b1;
	jAddr26[3] = #120000 1'b0;
end 
// jAddr26[ 2 ]
initial
begin
	jAddr26[2] = 1'b0;
	jAddr26[2] = #220000 1'b1;
	jAddr26[2] = #80000 1'b0;
	jAddr26[2] = #60000 1'b1;
	jAddr26[2] = #220000 1'b0;
end 
// jAddr26[ 1 ]
initial
begin
	jAddr26[1] = 1'b0;
end 
// jAddr26[ 0 ]
initial
begin
	jAddr26[0] = 1'b0;
	jAddr26[0] = #220000 1'b1;
	jAddr26[0] = #80000 1'b0;
end 
endmodule

