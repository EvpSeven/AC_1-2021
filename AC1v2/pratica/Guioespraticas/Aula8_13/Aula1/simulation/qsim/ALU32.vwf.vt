// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2018 16:18:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg [31:0] b;
reg [2:0] oper;
// wires                                               
wire [31:0] res;
wire zero;

// assign statements (if any)                          
ALU32 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.oper(oper),
	.res(res),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
	a[31] = #600000 1'b1;
	a[31] = #320000 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b0;
	a[30] = #600000 1'b1;
	a[30] = #320000 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
	a[29] = #600000 1'b1;
	a[29] = #320000 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b1;
	a[28] = #920000 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b1;
	a[25] = #920000 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
	a[24] = #600000 1'b1;
	a[24] = #320000 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b1;
	a[23] = #600000 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
	a[22] = #600000 1'b1;
	a[22] = #320000 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b1;
	a[21] = #600000 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b1;
	a[19] = #600000 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
	a[18] = #600000 1'b1;
	a[18] = #320000 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b1;
	a[17] = #920000 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b1;
	a[16] = #920000 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
	a[15] = #600000 1'b1;
	a[15] = #320000 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
	a[14] = #600000 1'b1;
	a[14] = #320000 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
	a[9] = #600000 1'b1;
	a[9] = #320000 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b1;
	a[8] = #600000 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #600000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
	a[4] = #920000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #600000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 31 ]
initial
begin
	b[31] = 1'b0;
end 
// b[ 30 ]
initial
begin
	b[30] = 1'b0;
end 
// b[ 29 ]
initial
begin
	b[29] = 1'b1;
	b[29] = #280000 1'b0;
end 
// b[ 28 ]
initial
begin
	b[28] = 1'b0;
	b[28] = #280000 1'b1;
	b[28] = #320000 1'b0;
end 
// b[ 27 ]
initial
begin
	b[27] = 1'b1;
	b[27] = #280000 1'b0;
end 
// b[ 26 ]
initial
begin
	b[26] = 1'b1;
	b[26] = #280000 1'b0;
end 
// b[ 25 ]
initial
begin
	b[25] = 1'b0;
	b[25] = #280000 1'b1;
	b[25] = #320000 1'b0;
end 
// b[ 24 ]
initial
begin
	b[24] = 1'b0;
	b[24] = #600000 1'b1;
	b[24] = #320000 1'b0;
end 
// b[ 23 ]
initial
begin
	b[23] = 1'b0;
	b[23] = #280000 1'b1;
	b[23] = #640000 1'b0;
end 
// b[ 22 ]
initial
begin
	b[22] = 1'b0;
	b[22] = #600000 1'b1;
	b[22] = #320000 1'b0;
end 
// b[ 21 ]
initial
begin
	b[21] = 1'b1;
	b[21] = #600000 1'b0;
end 
// b[ 20 ]
initial
begin
	b[20] = 1'b1;
	b[20] = #280000 1'b0;
	b[20] = #320000 1'b1;
	b[20] = #320000 1'b0;
end 
// b[ 19 ]
initial
begin
	b[19] = 1'b0;
	b[19] = #280000 1'b1;
	b[19] = #320000 1'b0;
end 
// b[ 18 ]
initial
begin
	b[18] = 1'b0;
end 
// b[ 17 ]
initial
begin
	b[17] = 1'b0;
	b[17] = #280000 1'b1;
	b[17] = #640000 1'b0;
end 
// b[ 16 ]
initial
begin
	b[16] = 1'b1;
	b[16] = #920000 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
	b[15] = #600000 1'b1;
	b[15] = #320000 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b1;
	b[14] = #280000 1'b0;
	b[14] = #320000 1'b1;
	b[14] = #320000 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
	b[13] = #600000 1'b1;
	b[13] = #320000 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b1;
	b[12] = #280000 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b1;
	b[10] = #280000 1'b0;
	b[10] = #320000 1'b1;
	b[10] = #320000 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
	b[8] = #280000 1'b1;
	b[8] = #320000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b1;
	b[7] = #280000 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b1;
	b[6] = #280000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b1;
	b[5] = #920000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
	b[4] = #600000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #280000 1'b1;
	b[2] = #640000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #600000 1'b1;
	b[0] = #320000 1'b0;
end 
// oper[ 2 ]
initial
begin
	oper[2] = 1'b0;
	# 120000;
	repeat(2)
	begin
		oper[2] = 1'b1;
		oper[2] = #160000 1'b0;
		# 160000;
	end
	oper[2] = 1'b1;
	oper[2] = #160000 1'b0;
end 
// oper[ 1 ]
initial
begin
	oper[1] = 1'b0;
	# 40000;
	repeat(6)
	begin
		oper[1] = 1'b1;
		oper[1] = #80000 1'b0;
		# 80000;
	end
end 
// oper[ 0 ]
initial
begin
	repeat(12)
	begin
		oper[0] = 1'b1;
		oper[0] = #40000 1'b0;
		# 40000;
	end
	oper[0] = 1'b1;
end 
endmodule

